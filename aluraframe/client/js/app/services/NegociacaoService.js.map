{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","erro","Error","_mensagem","texto","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","arrayAchatado","array","concat","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","apagaTodos","listaTodos","listaAtual","obterNegociacoes","filter","some","isEqual","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService{\r\n\r\n    constructor(){\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoesDaSemana(){\r\n        return this._http.get('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                    return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error(this._mensagem.texto = 'Não foi possível obter as negociações da semana.');\r\n                });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior(){\r\n        return this._http.get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                    return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error(this._mensagem.texto = 'Não foi possível obter as negociações da semana anterior.');\r\n                });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada(){\r\n        return this._http.get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                    return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error(this._mensagem.texto = 'Não foi possível obter as negociações da semana retrasada.');\r\n                });\r\n    }\r\n\r\n    obterNegociacoes() {\r\n        return Promise.all([this.obterNegociacoesDaSemana(),\r\n                     this.obterNegociacoesDaSemanaAnterior(),\r\n                     this.obterNegociacoesDaSemanaRetrasada()])\r\n                 .then(periodos => {\r\n                    let negociacoes = periodos\r\n                                            .reduce((arrayAchatado, array) => arrayAchatado.concat(array),[]);\r\n                     \r\n                    return negociacoes;\r\n                })\r\n                 .catch(erro => {\r\n                    throw new Error(erro)\r\n                });        \r\n     }\r\n\r\n     cadastra(negociacao){\r\n         return ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.adiciona(negociacao))\r\n                .then(() => 'Negociação cadastrada com sucesso')\r\n                .catch(erro => {\r\n                    console.log(erro)\r\n                    throw new Error('Não foi possível adicionar a negociação.');\r\n                });\r\n     }\r\n\r\n     apaga(){\r\n        return ConnectionFactory\r\n                    .getConnection()\r\n                    .then(connection => new NegociacaoDao(connection))\r\n                    .then(dao => dao.apagaTodos())\r\n                    .then(() => 'Negociações apagadas com sucesso.')\r\n                    .catch(erro => {\r\n                        console.log(erro);\r\n                        throw new Error('Não foi possível apagar as negociações.')\r\n                    });\r\n     }\r\n\r\n     lista(){\r\n         return ConnectionFactory\r\n                    .getConnection()\r\n                    .then(connection => new NegociacaoDao(connection))\r\n                    .then(dao => dao.listaTodos())\r\n                    .catch(erro => {\r\n                        console.log(erro);\r\n                        throw new Error('Não foi possível obter as negociações.')\r\n                    });\r\n     }\r\n\r\n     importa(listaAtual){\r\n        return this.obterNegociacoes()\r\n        .then(negociacoes => \r\n            negociacoes.filter(negociacao => \r\n                !listaAtual.some(negociacaoExistente => \r\n                    negociacao.isEqual(negociacaoExistente)))\r\n        )\r\n        .catch(erro => {\r\n            console.log(erro);\r\n            throw new Error('Não foi possível importar as negociações');\r\n        });\r\n     }\r\n}"]}